<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>top-level-items</key>
	<array>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>0</string>
					<key>EndingLineNumber</key>
					<string>80</string>
					<key>StartingColumnNumber</key>
					<string>0</string>
					<key>StartingLineNumber</key>
					<string>79</string>
					<key>Timestamp</key>
					<string>731195527.626366</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>SeSAC_CoingeckoProject/View/SearchView/SearchViewController.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>        // 해결법 )
</string>
				<key>leading</key>
				<string>        cell.configureCell(coinData: data, row: indexPath.row)
        
</string>
				<key>trailing</key>
				<string>        viewModel.inputFetchFavoriteTrigger.value = ()
        // 검색한 단어는 보라색으로
        let attribtuedString = NSMutableAttributedString(string: data.name)
</string>
			</dict>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>0</string>
					<key>EndingLineNumber</key>
					<string>33</string>
					<key>StartingColumnNumber</key>
					<string>0</string>
					<key>StartingLineNumber</key>
					<string>32</string>
					<key>Timestamp</key>
					<string>731194394.6734411</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>SeSAC_CoingeckoProject/View/SearchView/SearchViewModel.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>                    self.oupPutSearchCoinData.value = value.coins
</string>
				<key>leading</key>
				<string>                CoinAPIManager.shared.fetchCoinData(type: Coingecko.self, api: .search(query: text), completionHandler: { value, error in
                    guard let value else { return }
</string>
				<key>trailing</key>
				<string>                    print("oupPutSearchCoinData value", value)
                })
            }
</string>
			</dict>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>0</string>
					<key>EndingLineNumber</key>
					<string>32</string>
					<key>StartingColumnNumber</key>
					<string>0</string>
					<key>StartingLineNumber</key>
					<string>31</string>
					<key>Timestamp</key>
					<string>731195527.626344</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>SeSAC_CoingeckoProject/View/SearchView/SearchViewController.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>        self.mainView.tableView.reloadData() // MVVM으로 하려면 어떻ㄱ게,,?
</string>
				<key>leading</key>
				<string>        super.viewWillAppear(animated)
        viewModel.inputFetchFavoriteTrigger.value = () // 즐겨찾기목록 패치
</string>
				<key>trailing</key>
				<string>    }
    
    func bindData() {
</string>
			</dict>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>0</string>
					<key>EndingLineNumber</key>
					<string>37</string>
					<key>StartingColumnNumber</key>
					<string>0</string>
					<key>StartingLineNumber</key>
					<string>36</string>
					<key>Timestamp</key>
					<string>731197417.74985</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>SeSAC_CoingeckoProject/View/ChartView/ChartViewController.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>//        if !viewModel.outPutFetchFav.value { // 왜 작동안됨!?!
</string>
				<key>leading</key>
				<string>        viewModel.inputFetchFavoriteTrigger.value = () // 즐겨찾기 다시 가져오기
        //만약 다시 들어왔는데 즐겨찾기에서 해제되어있다면 화면 나가기
</string>
				<key>trailing</key>
				<string>//            navigationController?.popViewController(animated: true)
//        }
    }
</string>
			</dict>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>0</string>
					<key>EndingLineNumber</key>
					<string>33</string>
					<key>StartingColumnNumber</key>
					<string>0</string>
					<key>StartingLineNumber</key>
					<string>32</string>
					<key>Timestamp</key>
					<string>731178667.215747</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>SeSAC_CoingeckoProject/View/FavoriteView/FavoriteViewModel.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>    func fetchCoinItem(row: Int, completionHandler: @escaping (Int?, Double?) -&gt; Void) {
</string>
				<key>leading</key>
				<string>        }
    }
</string>
				<key>trailing</key>
				<string>        var data: CoinDetail? = nil
        CoinAPIManager.shared.fetchCoinData(type: [CoinDetail].self, api: .coinMarket(ids: favoriteList.value[row].idString)) { value, error in
            guard let value else { return }
</string>
			</dict>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>0</string>
					<key>EndingLineNumber</key>
					<string>61</string>
					<key>StartingColumnNumber</key>
					<string>0</string>
					<key>StartingLineNumber</key>
					<string>60</string>
					<key>Timestamp</key>
					<string>731235896.3666199</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>SeSAC_CoingeckoProject/View/TrendingView/TrendingViewController.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>            cell.collectionView.register(TrendingFavCollectionViewCell.self, forCellWithReuseIdentifier: TrendingFavCollectionViewCell.identifier)
</string>
				<key>leading</key>
				<string>                return UITableViewCell()
            }
</string>
				<key>trailing</key>
				<string>            cell.collectionView.delegate = self
            cell.collectionView.dataSource = self
            cell.collectionView.tag = indexPath.row
</string>
			</dict>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>38</string>
					<key>EndingLineNumber</key>
					<string>70</string>
					<key>StartingColumnNumber</key>
					<string>21</string>
					<key>StartingLineNumber</key>
					<string>70</string>
					<key>Timestamp</key>
					<string>731195569.404865</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>SeSAC_CoingeckoProject/View/SearchView/SearchViewModel.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>outputStarClicked</string>
				<key>leading</key>
				<string>                self.inputFetchFavoriteTrigger.value = () // 즐겨찾기 목록 다시 가져오기(즐겨찾기에 넣어주는것보다 빠름,,)
                self.outPutTableReloadRow.value = tag
                self.</string>
				<key>trailing</key>
				<string>.value = false
            }
        } else {
</string>
			</dict>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>0</string>
					<key>EndingLineNumber</key>
					<string>126</string>
					<key>StartingColumnNumber</key>
					<string>0</string>
					<key>StartingLineNumber</key>
					<string>125</string>
					<key>Timestamp</key>
					<string>731235896.366858</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>SeSAC_CoingeckoProject/View/TrendingView/TrendingViewController.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>                // 이 로직은 VC에 하는게 맞나?
</string>
				<key>leading</key>
				<string>            viewModel.fetchCoinItem(row: indexPath.row) { (currentPrice, percent) in
                
</string>
				<key>trailing</key>
				<string>                if let currentPrice, let percent {
                    cell.currentPriceLabel.text = "₩\(NumberFormatManager.shared.calculator(currentPrice))"
                    cell.percentLabel.text = self.viewModel.isUpPercent.value ? "+\(percent)%" : "\(percent)%"
</string>
			</dict>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>0</string>
					<key>EndingLineNumber</key>
					<string>123</string>
					<key>StartingColumnNumber</key>
					<string>0</string>
					<key>StartingLineNumber</key>
					<string>122</string>
					<key>Timestamp</key>
					<string>731235896.366904</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>SeSAC_CoingeckoProject/View/TrendingView/TrendingViewController.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>            // fetchCoinItem을 @escaping을 써주지 않으면 통신을 마치기도 전에 코드가 진행되어서 제대로된 currentPrice와 percent를 가져올 수 없었다.
</string>
				<key>leading</key>
				<string>            cell.configureCell(cellData)
            
</string>
				<key>trailing</key>
				<string>            viewModel.fetchCoinItem(row: indexPath.row) { (currentPrice, percent) in
                
                // 이 로직은 VC에 하는게 맞나?
</string>
			</dict>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>0</string>
					<key>EndingLineNumber</key>
					<string>130</string>
					<key>StartingColumnNumber</key>
					<string>0</string>
					<key>StartingLineNumber</key>
					<string>129</string>
					<key>Timestamp</key>
					<string>731235896.366881</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>SeSAC_CoingeckoProject/View/TrendingView/TrendingViewController.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>                    // isUpPercent를 이렇게 쓸거면 굳이 Observable로 할 필요가 있나?
</string>
				<key>leading</key>
				<string>                    cell.currentPriceLabel.text = "₩\(NumberFormatManager.shared.calculator(currentPrice))"
                    cell.percentLabel.text = self.viewModel.isUpPercent.value ? "+\(percent)%" : "\(percent)%"
</string>
				<key>trailing</key>
				<string>                    cell.percentLabel.textColor = self.viewModel.isUpPercent.value ? Constants.Color.upParcentLabel : Constants.Color.downPercentLabel
                } else {
                    cell.currentPriceLabel.text = "통신 실패"
</string>
			</dict>
			<key>type</key>
			<string>bookmark</string>
		</dict>
	</array>
</dict>
</plist>
