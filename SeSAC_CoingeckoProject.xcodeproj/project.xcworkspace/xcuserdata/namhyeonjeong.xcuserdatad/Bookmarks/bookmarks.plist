<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>top-level-items</key>
	<array>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>0</string>
					<key>EndingLineNumber</key>
					<string>37</string>
					<key>StartingColumnNumber</key>
					<string>0</string>
					<key>StartingLineNumber</key>
					<string>36</string>
					<key>Timestamp</key>
					<string>740507746.222815</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>SeSAC_CoingeckoProject/View/ChartView/ChartViewController.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>//        if !viewModel.outPutFetchFav.value { // 왜 작동안됨!?!
</string>
				<key>leading</key>
				<string>        viewModel.inputFetchFavoriteTrigger.value = () // 즐겨찾기 다시 가져오기
        //만약 다시 들어왔는데 즐겨찾기에서 해제되어있다면 화면 나가기
</string>
				<key>trailing</key>
				<string>//            navigationController?.popViewController(animated: true)
//        }
    }
</string>
			</dict>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>0</string>
					<key>EndingLineNumber</key>
					<string>38</string>
					<key>StartingColumnNumber</key>
					<string>0</string>
					<key>StartingLineNumber</key>
					<string>37</string>
					<key>Timestamp</key>
					<string>740914481.565919</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>SeSAC_CoingeckoProject/View/FavoriteView/FavoriteViewModel.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>    func fetchCoinItem(completionHandler: @escaping ([(Double?, Double?)]) -&gt; Void) {
</string>
				<key>leading</key>
				<string>    }
    
</string>
				<key>trailing</key>
				<string>        CoinAPIManager.shared.fetchCoinData(type: [CoinDetail].self, api: .coinMarket(idList: outputFavoriteList.value.map({ favoriteCoin in
            favoriteCoin.idString
        }))) { value, error in
</string>
			</dict>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>0</string>
					<key>EndingLineNumber</key>
					<string>141</string>
					<key>StartingColumnNumber</key>
					<string>0</string>
					<key>StartingLineNumber</key>
					<string>141</string>
					<key>Timestamp</key>
					<string>740847005.493251</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>SeSAC_CoingeckoProject/View/TrendingView/TrendingViewController.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string></string>
				<key>leading</key>
				<string>//            }

</string>
				<key>trailing</key>
				<string>            return cell
        } else if row == .coin {
            guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: TrendingCoinCollectionViewCell.identifier, for: indexPath) as? TrendingCoinCollectionViewCell else {
</string>
			</dict>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>0</string>
					<key>EndingLineNumber</key>
					<string>126</string>
					<key>StartingColumnNumber</key>
					<string>0</string>
					<key>StartingLineNumber</key>
					<string>125</string>
					<key>Timestamp</key>
					<string>740506830.2832479</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>SeSAC_CoingeckoProject/View/TrendingView/TrendingViewController.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>            // fetchCoinItem을 @escaping을 써주지 않으면 통신을 마치기도 전에 코드가 진행되어서 제대로된 currentPrice와 percent를 가져올 수 없었다.
</string>
				<key>leading</key>
				<string>            cell.configureCell(cellData)
            
</string>
				<key>trailing</key>
				<string>//            viewModel.fetchCoinItem(row: indexPath.row)
                
            // 이 로직은 VC에 하는게 맞나?
</string>
			</dict>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>0</string>
					<key>EndingLineNumber</key>
					<string>141</string>
					<key>StartingColumnNumber</key>
					<string>0</string>
					<key>StartingLineNumber</key>
					<string>141</string>
					<key>Timestamp</key>
					<string>740847005.493261</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>SeSAC_CoingeckoProject/View/TrendingView/TrendingViewController.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string></string>
				<key>leading</key>
				<string>//            }

</string>
				<key>trailing</key>
				<string>            return cell
        } else if row == .coin {
            guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: TrendingCoinCollectionViewCell.identifier, for: indexPath) as? TrendingCoinCollectionViewCell else {
</string>
			</dict>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>0</string>
					<key>EndingLineNumber</key>
					<string>93</string>
					<key>StartingColumnNumber</key>
					<string>0</string>
					<key>StartingLineNumber</key>
					<string>93</string>
					<key>Timestamp</key>
					<string>740507065.37545</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>SeSAC_CoingeckoProject/View/TrendingView/TrendingViewModel.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string></string>
				<key>leading</key>
				<string>    func fetchCoinItem(row: Int/*, completionHandler: @escaping (Int?, Double?) -&gt; Void*/) {
        // completionHandler사용하면 api통신이 끝날떄까지 table이 그려지는동안 계속 기다려야 하니까 좋은 방법은 아닌듯,,?
</string>
				<key>trailing</key>
				<string>        var data: CoinDetail? = nil
        /*
         1. completionHandler을 사용할 때
</string>
			</dict>
			<key>title</key>
			<string>reusltType -&gt; 2/5</string>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>0</string>
					<key>EndingLineNumber</key>
					<string>117</string>
					<key>StartingColumnNumber</key>
					<string>0</string>
					<key>StartingLineNumber</key>
					<string>116</string>
					<key>Timestamp</key>
					<string>740506843.502565</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>SeSAC_CoingeckoProject/View/TrendingView/TrendingViewModel.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>
</string>
				<key>leading</key>
				<string>            }
            self.checkPercent(data.price_change_percentage_24h) // 양수음수 확인
</string>
				<key>trailing</key>
				<string>//            completionHandler(data.current_price, data.price_change_percentage_24h)
            group.leave()
        }
</string>
			</dict>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>0</string>
					<key>EndingLineNumber</key>
					<string>95</string>
					<key>StartingColumnNumber</key>
					<string>0</string>
					<key>StartingLineNumber</key>
					<string>94</string>
					<key>Timestamp</key>
					<string>740506843.502508</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>SeSAC_CoingeckoProject/View/TrendingView/TrendingViewModel.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>        /*
</string>
				<key>leading</key>
				<string>        // completionHandler사용하면 api통신이 끝날떄까지 table이 그려지는동안 계속 기다려야 하니까 좋은 방법은 아닌듯,,?
        var data: CoinDetail? = nil
</string>
				<key>trailing</key>
				<string>         1. completionHandler을 사용할 때
         
         2. dispatchGroup을 사용할 때
</string>
			</dict>
			<key>title</key>
			<string>3가지 별로 알아보기,,,</string>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>0</string>
					<key>EndingLineNumber</key>
					<string>49</string>
					<key>StartingColumnNumber</key>
					<string>0</string>
					<key>StartingLineNumber</key>
					<string>48</string>
					<key>Timestamp</key>
					<string>740914481.565887</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>SeSAC_CoingeckoProject/View/FavoriteView/FavoriteViewModel.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>//            self.checkPercent(data.price_change_percentage_24h) // 양수음수 확인
</string>
				<key>leading</key>
				<string>//                return
//            }
</string>
				<key>trailing</key>
				<string>//            completionHandler(data.current_price, data.price_change_percentage_24h)
            completionHandler(value.map({ coin in
                (coin.current_price, coin.price_change_percentage_24h)
</string>
			</dict>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>0</string>
					<key>EndingLineNumber</key>
					<string>69</string>
					<key>StartingColumnNumber</key>
					<string>0</string>
					<key>StartingLineNumber</key>
					<string>68</string>
					<key>Timestamp</key>
					<string>740914541.609954</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>SeSAC_CoingeckoProject/View/FavoriteView/FavoriteViewController.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>        viewModel.fetchCoinItem(row: indexPath.row) { (currentPrice, percent) in
</string>
				<key>leading</key>
				<string>        // 셀마다 api통신해서 실시간 가격, 퍼센트 가져오기
        /*
</string>
				<key>trailing</key>
				<string>            if let currentPrice, let percent {
                print("currentPrice, percent잘 받아옴")
                cell.currentPrice.text = "₩\(NumberFormatManager.shared.calculator(Int(currentPrice)))"
</string>
			</dict>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>39</string>
					<key>EndingLineNumber</key>
					<string>25</string>
					<key>StartingColumnNumber</key>
					<string>33</string>
					<key>StartingLineNumber</key>
					<string>25</string>
					<key>Timestamp</key>
					<string>740847167.291701</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>SeSAC_CoingeckoProject/View/FavoriteView/FavoriteViewModel.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>values</string>
				<key>leading</key>
				<string>        inputReadFavTrigger.bind { _ in
            self.outputFavoriteList.value = RealmRepository.shared.fetchItem()
            self.fetchCoinItem { </string>
				<key>trailing</key>
				<string> in
                  print("🚨 \(values)")
                self.fetchCurrentPriceAndPercentList.value = values
</string>
			</dict>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>52</string>
					<key>EndingLineNumber</key>
					<string>126</string>
					<key>StartingColumnNumber</key>
					<string>43</string>
					<key>StartingLineNumber</key>
					<string>126</string>
					<key>Timestamp</key>
					<string>740847184.08962</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>SeSAC_CoingeckoProject/View/TrendingView/TrendingViewController.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>indexPath</string>
				<key>leading</key>
				<string>            
            // fetchCoinItem을 @escaping을 써주지 않으면 통신을 마치기도 전에 코드가 진행되어서 제대로된 currentPrice와 percent를 가져올 수 없었다.
//            viewModel.fetchCoinItem(row: </string>
				<key>trailing</key>
				<string>.row)
                
            // 이 로직은 VC에 하는게 맞나?
</string>
			</dict>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>32</string>
					<key>EndingLineNumber</key>
					<string>91</string>
					<key>StartingColumnNumber</key>
					<string>31</string>
					<key>StartingLineNumber</key>
					<string>91</string>
					<key>Timestamp</key>
					<string>740847195.365442</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>SeSAC_CoingeckoProject/View/TrendingView/TrendingViewModel.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>/</string>
				<key>leading</key>
				<string>    }
    /*
    func fetchCoinItem(row: Int</string>
				<key>trailing</key>
				<string>*, completionHandler: @escaping (Int?, Double?) -&gt; Void*/) {
        // completionHandler사용하면 api통신이 끝날떄까지 table이 그려지는동안 계속 기다려야 하니까 좋은 방법은 아닌듯,,?
        var data: CoinDetail? = nil
</string>
			</dict>
			<key>type</key>
			<string>bookmark</string>
		</dict>
	</array>
</dict>
</plist>
