<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>top-level-items</key>
	<array>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>0</string>
					<key>EndingLineNumber</key>
					<string>37</string>
					<key>StartingColumnNumber</key>
					<string>0</string>
					<key>StartingLineNumber</key>
					<string>36</string>
					<key>Timestamp</key>
					<string>740507746.222815</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>SeSAC_CoingeckoProject/View/ChartView/ChartViewController.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>//        if !viewModel.outPutFetchFav.value { // 왜 작동안됨!?!
</string>
				<key>leading</key>
				<string>        viewModel.inputFetchFavoriteTrigger.value = () // 즐겨찾기 다시 가져오기
        //만약 다시 들어왔는데 즐겨찾기에서 해제되어있다면 화면 나가기
</string>
				<key>trailing</key>
				<string>//            navigationController?.popViewController(animated: true)
//        }
    }
</string>
			</dict>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>0</string>
					<key>EndingLineNumber</key>
					<string>36</string>
					<key>StartingColumnNumber</key>
					<string>0</string>
					<key>StartingLineNumber</key>
					<string>35</string>
					<key>Timestamp</key>
					<string>740935737.381902</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>SeSAC_CoingeckoProject/View/FavoriteView/FavoriteViewModel.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>    func fetchCoinItem(completionHandler: @escaping ([(Double?, Double?)]) -&gt; Void) {
</string>
				<key>leading</key>
				<string>    }
    
</string>
				<key>trailing</key>
				<string>        CoinAPIManager.shared.fetchCoinData(type: [CoinDetail].self, api: .coinMarket(idList: outputFavoriteList.value.map({ favoriteCoin in
            favoriteCoin.idString
        }))) { value, error in
</string>
			</dict>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>0</string>
					<key>EndingLineNumber</key>
					<string>120</string>
					<key>StartingColumnNumber</key>
					<string>0</string>
					<key>StartingLineNumber</key>
					<string>119</string>
					<key>Timestamp</key>
					<string>740935690.352262</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>SeSAC_CoingeckoProject/View/TrendingView/TrendingViewController.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>            return cell
</string>
				<key>leading</key>
				<string>                cell.configureCell(cellData, priceAndPercent: viewModel.fetchCurrentPriceAndPercentList.value[indexPath.row])
            }
</string>
				<key>trailing</key>
				<string>        } else if row == .coin {
            guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: TrendingCoinCollectionViewCell.identifier, for: indexPath) as? TrendingCoinCollectionViewCell else {
                return UICollectionViewCell()
</string>
			</dict>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>0</string>
					<key>EndingLineNumber</key>
					<string>120</string>
					<key>StartingColumnNumber</key>
					<string>0</string>
					<key>StartingLineNumber</key>
					<string>119</string>
					<key>Timestamp</key>
					<string>740935690.352339</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>SeSAC_CoingeckoProject/View/TrendingView/TrendingViewController.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>            return cell
</string>
				<key>leading</key>
				<string>                cell.configureCell(cellData, priceAndPercent: viewModel.fetchCurrentPriceAndPercentList.value[indexPath.row])
            }
</string>
				<key>trailing</key>
				<string>        } else if row == .coin {
            guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: TrendingCoinCollectionViewCell.identifier, for: indexPath) as? TrendingCoinCollectionViewCell else {
                return UICollectionViewCell()
</string>
			</dict>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>0</string>
					<key>EndingLineNumber</key>
					<string>120</string>
					<key>StartingColumnNumber</key>
					<string>0</string>
					<key>StartingLineNumber</key>
					<string>119</string>
					<key>Timestamp</key>
					<string>740935690.3517981</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>SeSAC_CoingeckoProject/View/TrendingView/TrendingViewController.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>            return cell
</string>
				<key>leading</key>
				<string>                cell.configureCell(cellData, priceAndPercent: viewModel.fetchCurrentPriceAndPercentList.value[indexPath.row])
            }
</string>
				<key>trailing</key>
				<string>        } else if row == .coin {
            guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: TrendingCoinCollectionViewCell.identifier, for: indexPath) as? TrendingCoinCollectionViewCell else {
                return UICollectionViewCell()
</string>
			</dict>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>0</string>
					<key>EndingLineNumber</key>
					<string>87</string>
					<key>StartingColumnNumber</key>
					<string>0</string>
					<key>StartingLineNumber</key>
					<string>87</string>
					<key>Timestamp</key>
					<string>741005317.052511</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>SeSAC_CoingeckoProject/View/TrendingView/TrendingViewModel.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string></string>
				<key>leading</key>
				<string>        let favListCount = outputFavoriteList.value.count
        if favListCount &gt;= 0 &amp;&amp; favListCount &lt; 2 {
</string>
				<key>trailing</key>
				<string>            rowList = favListCount &gt;= 0 &amp;&amp; favListCount &lt; 2 ? [.coin, .nft] : RowEnum.allCases
        } else {
            rowList = RowEnum.allCases
</string>
			</dict>
			<key>title</key>
			<string>reusltType -&gt; 2/5</string>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>0</string>
					<key>EndingLineNumber</key>
					<string>87</string>
					<key>StartingColumnNumber</key>
					<string>0</string>
					<key>StartingLineNumber</key>
					<string>87</string>
					<key>Timestamp</key>
					<string>741005317.052524</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>SeSAC_CoingeckoProject/View/TrendingView/TrendingViewModel.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string></string>
				<key>leading</key>
				<string>        let favListCount = outputFavoriteList.value.count
        if favListCount &gt;= 0 &amp;&amp; favListCount &lt; 2 {
</string>
				<key>trailing</key>
				<string>            rowList = favListCount &gt;= 0 &amp;&amp; favListCount &lt; 2 ? [.coin, .nft] : RowEnum.allCases
        } else {
            rowList = RowEnum.allCases
</string>
			</dict>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>0</string>
					<key>EndingLineNumber</key>
					<string>87</string>
					<key>StartingColumnNumber</key>
					<string>0</string>
					<key>StartingLineNumber</key>
					<string>87</string>
					<key>Timestamp</key>
					<string>741005317.052541</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>SeSAC_CoingeckoProject/View/TrendingView/TrendingViewModel.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string></string>
				<key>leading</key>
				<string>        let favListCount = outputFavoriteList.value.count
        if favListCount &gt;= 0 &amp;&amp; favListCount &lt; 2 {
</string>
				<key>trailing</key>
				<string>            rowList = favListCount &gt;= 0 &amp;&amp; favListCount &lt; 2 ? [.coin, .nft] : RowEnum.allCases
        } else {
            rowList = RowEnum.allCases
</string>
			</dict>
			<key>title</key>
			<string>3가지 별로 알아보기,,,</string>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>0</string>
					<key>EndingLineNumber</key>
					<string>40</string>
					<key>StartingColumnNumber</key>
					<string>0</string>
					<key>StartingLineNumber</key>
					<string>39</string>
					<key>Timestamp</key>
					<string>740935737.3819129</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>SeSAC_CoingeckoProject/View/FavoriteView/FavoriteViewModel.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>            guard let value else { return }
</string>
				<key>leading</key>
				<string>            favoriteCoin.idString
        }))) { value, error in
</string>
				<key>trailing</key>
				<string>            completionHandler(value.map({ coin in
                (coin.current_price, coin.price_change_percentage_24h)
            }))
</string>
			</dict>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingLineNumber</key>
					<string>61</string>
					<key>StartingLineNumber</key>
					<string>61</string>
					<key>Timestamp</key>
					<string>741008417.91249</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>SeSAC_CoingeckoProject/View/FavoriteView/FavoriteViewController.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>        cell.configureCell(viewModel.outputFavoriteList.value[indexPath.row], priceAndPercent: viewModel.fetchCurrentPriceAndPercentList.value[indexPath.row])
</string>
				<key>leading</key>
				<string>            return UICollectionViewCell()
        }
</string>
				<key>trailing</key>
				<string>        return cell
    }
    
</string>
			</dict>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>42</string>
					<key>EndingLineNumber</key>
					<string>24</string>
					<key>StartingColumnNumber</key>
					<string>0</string>
					<key>StartingLineNumber</key>
					<string>24</string>
					<key>Timestamp</key>
					<string>740935786.233004</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>SeSAC_CoingeckoProject/View/FavoriteView/FavoriteViewModel.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>            self.fetchCoinItem { values in</string>
				<key>leading</key>
				<string>        inputReadFavTrigger.bind { _ in
            self.outputFavoriteList.value = RealmRepository.shared.fetchItem()
</string>
				<key>trailing</key>
				<string>
                self.fetchCurrentPriceAndPercentList.value = values
                
</string>
			</dict>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>0</string>
					<key>EndingLineNumber</key>
					<string>120</string>
					<key>StartingColumnNumber</key>
					<string>0</string>
					<key>StartingLineNumber</key>
					<string>119</string>
					<key>Timestamp</key>
					<string>740935690.352185</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>SeSAC_CoingeckoProject/View/TrendingView/TrendingViewController.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>            return cell
</string>
				<key>leading</key>
				<string>                cell.configureCell(cellData, priceAndPercent: viewModel.fetchCurrentPriceAndPercentList.value[indexPath.row])
            }
</string>
				<key>trailing</key>
				<string>        } else if row == .coin {
            guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: TrendingCoinCollectionViewCell.identifier, for: indexPath) as? TrendingCoinCollectionViewCell else {
                return UICollectionViewCell()
</string>
			</dict>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>0</string>
					<key>EndingLineNumber</key>
					<string>87</string>
					<key>StartingColumnNumber</key>
					<string>0</string>
					<key>StartingLineNumber</key>
					<string>87</string>
					<key>Timestamp</key>
					<string>741005317.052412</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>SeSAC_CoingeckoProject/View/TrendingView/TrendingViewModel.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string></string>
				<key>leading</key>
				<string>        let favListCount = outputFavoriteList.value.count
        if favListCount &gt;= 0 &amp;&amp; favListCount &lt; 2 {
</string>
				<key>trailing</key>
				<string>            rowList = favListCount &gt;= 0 &amp;&amp; favListCount &lt; 2 ? [.coin, .nft] : RowEnum.allCases
        } else {
            rowList = RowEnum.allCases
</string>
			</dict>
			<key>type</key>
			<string>bookmark</string>
		</dict>
	</array>
</dict>
</plist>
